(()=>{"use strict";function e(){console.log("üöÄ Setting up CSP-compliant wallet provider...");const e=new CustomEvent("stellarWalletInstalled",{detail:{available:!0,version:"1.0.0",methods:["connect","getBalance","sendPayment","getPublicKey"],extensionId:chrome.runtime.id}});window.dispatchEvent(e),console.log("‚úÖ Wallet ready event dispatched");try{Object.defineProperty(window,"isStellarWalletInstalled",{value:!0,writable:!1,configurable:!1}),Object.defineProperty(window,"stellarWalletVersion",{value:"1.0.0",writable:!1,configurable:!1}),console.log("‚úÖ Wallet detection properties set")}catch(e){console.log("‚ö†Ô∏è Could not set wallet detection properties:",e)}console.log("‚úÖ CSP-compliant wallet provider setup complete")}console.log("üåê Stellar Web3 Extension content script loaded on:",window.location.href),console.log("üåê Document ready state:",document.readyState),console.log("üåê Extension ID:",chrome.runtime.id),window.addEventListener("message",async e=>{if("STELLAR_WALLET_REQUEST"===e.data.type){const{method:t,data:o}=e.data;try{let e;switch(t){case"connect":if(e=await chrome.runtime.sendMessage({type:"CHECK_AUTH"}),!(e&&e.success&&e.data.isAuthenticated))throw new Error("User not authenticated. Please login to the extension.");window.postMessage({type:"STELLAR_WALLET_RESPONSE",method:"connect",success:!0,data:{publicKey:e.data.user.publicKey,email:e.data.user.email,name:e.data.user.name}},"*");break;case"getBalance":e=await chrome.runtime.sendMessage({type:"GET_WALLET_BALANCE"}),window.postMessage({type:"STELLAR_WALLET_RESPONSE",method:"getBalance",success:e?.success||!1,data:e?.data,error:e?.error},"*");break;case"sendPayment":e=await chrome.runtime.sendMessage({type:"SEND_PAYMENT",data:o}),window.postMessage({type:"STELLAR_WALLET_RESPONSE",method:"sendPayment",success:e?.success||!1,data:e?.data,error:e?.error},"*");break;default:throw new Error(`Unknown method: ${t}`)}}catch(e){window.postMessage({type:"STELLAR_WALLET_RESPONSE",method:t,success:!1,error:e instanceof Error?e.message:"Unknown error"},"*")}}}),chrome.runtime.onMessage.addListener((e,t,o)=>{switch(console.log("Content script received message:",e),e.type){case"PING":o({success:!0,message:"Content script is active"});break;case"GET_PAGE_INFO":o({success:!0,data:{url:window.location.href,title:document.title,domain:window.location.hostname}});break;default:o({success:!1,error:"Unknown message type"})}return!0}),console.log("üîÑ Setting up injection triggers..."),console.log("üéØ Attempting immediate injection..."),e(),"loading"===document.readyState?(console.log("üìÑ Document still loading, setting up DOMContentLoaded listener..."),document.addEventListener("DOMContentLoaded",()=>{console.log("üìÑ DOMContentLoaded event fired, injecting..."),e()})):(console.log("üìÑ Document already loaded, injecting immediately..."),e()),window.addEventListener("load",()=>{console.log("ü™ü Window load event fired, doing backup injection..."),e()}),setTimeout(()=>{console.log("‚è∞ Timeout injection as safety measure..."),e()},100)})();