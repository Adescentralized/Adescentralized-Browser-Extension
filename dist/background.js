(()=>{"use strict";var e={79:(e,t,s)=>{s.r(t),s.d(t,{ApiService:()=>a});const r="http://localhost:3001";class a{static async makeRequest(e,t={}){try{console.log(`üåê Making API request to: ${r}${e}`),console.log("Request options:",t);const s=await this.getAuthToken(),a=await fetch(`${r}${e}`,{...t,headers:{"Content-Type":"application/json",...s&&{Authorization:`Bearer ${s}`},...t.headers}});if(console.log(`üì° Response status: ${a.status} ${a.statusText}`),!a.ok){let e=`HTTP ${a.status}: ${a.statusText}`;try{const t=await a.text();if(console.log("‚ùå Error response body:",t),t.startsWith("{")){const s=JSON.parse(t);e=s.error||s.message||e}else e=t.includes("<html>")?`Server returned HTML instead of JSON. Check if API is running on ${r}`:t||e}catch(e){console.log("Could not parse error response")}return{success:!1,error:e}}const o=await a.text();if(console.log("üì¶ Raw response:",o),!o.startsWith("{")&&!o.startsWith("["))return{success:!1,error:`Server returned non-JSON response: ${o.substring(0,100)}...`};const n=JSON.parse(o);return console.log("‚úÖ Parsed response data:",n),{success:!0,data:n}}catch(e){return console.error("üí• API request failed:",e),e instanceof TypeError&&e.message.includes("fetch")?{success:!1,error:`Network error: Could not connect to API at ${r}. Is the server running?`}:{success:!1,error:e instanceof Error?e.message:"Request failed"}}}static async getAuthToken(){try{return(await chrome.storage.local.get(["authToken"])).authToken||null}catch(e){return console.error("Failed to get auth token:",e),null}}static async setAuthToken(e){try{await chrome.storage.local.set({authToken:e})}catch(e){console.error("Failed to set auth token:",e)}}static async clearAuthToken(){try{await chrome.storage.local.remove(["authToken"])}catch(e){console.error("Failed to clear auth token:",e)}}static async login(e,t){const s=await this.makeRequest("/wallet/login",{method:"POST",body:JSON.stringify({email:e,password:t})});return s.success&&s.data?.token&&await this.setAuthToken(s.data.token),s}static async createAccount(e,t,s){return this.makeRequest("/wallet/",{method:"POST",body:JSON.stringify({email:e,password:t,name:s})})}static async getUserWalletByEmail(e){return this.makeRequest(`/wallet/${e}`)}static async deleteUserByEmail(e){return this.makeRequest(`/wallet/${e}`,{method:"DELETE"})}static async createTransfer(e,t,s){return this.makeRequest("/transfer",{method:"POST",body:JSON.stringify({fromEmail:e,toPublicKey:t,amount:parseFloat(s)})})}static async getDashboard(e){return this.makeRequest(`/dashboard/${e}`)}static async createAdvertisement(e){const t=new FormData;t.append("title",e.title),e.description&&t.append("description",e.description),t.append("campaignImage",e.campaignImage),t.append("targetUrl",e.targetUrl),t.append("budgetXlm",e.budgetXlm.toString()),t.append("costPerClick",e.costPerClick.toString()),e.tags&&t.append("tags",e.tags);try{console.log(`üåê Making form-data API request to: ${r}/advertisements`);const e=await this.getAuthToken(),s=await fetch(`${r}/advertisements`,{method:"POST",headers:{...e&&{Authorization:`Bearer ${e}`}},body:t});if(console.log(`üì° Response status: ${s.status} ${s.statusText}`),!s.ok){let e=`HTTP ${s.status}: ${s.statusText}`;try{const t=await s.text();if(console.log("‚ùå Error response body:",t),t.startsWith("{")){const s=JSON.parse(t);e=s.error||s.message||e}}catch(e){console.log("Could not parse error response")}return{success:!1,error:e}}const a=await s.text(),o=JSON.parse(a);return console.log("‚úÖ Advertisement created:",o),{success:!0,data:o}}catch(e){return console.error("üí• Advertisement creation failed:",e),{success:!1,error:e instanceof Error?e.message:"Failed to create advertisement"}}}static async getUserAdvertisements(e){return this.makeRequest(`/advertisements/${e}`)}static async updateAdvertisement(e,t){return this.makeRequest(`/advertisements/${e}`,{method:"PUT",body:JSON.stringify(t)})}static async deleteAdvertisement(e){return this.makeRequest(`/advertisements/${e}`,{method:"DELETE"})}static async createSite(e){return this.makeRequest("/sites",{method:"POST",body:JSON.stringify(e)})}static async getUserSites(e){return this.makeRequest(`/sites/${e}`)}static async updateSite(e,t){return this.makeRequest(`/sites/${e}`,{method:"PUT",body:JSON.stringify(t)})}static async getSiteSDKCode(e){return this.makeRequest(`/sites/${e}/sdk-code`)}static async healthCheck(){return this.makeRequest("/health-check")}static async testConnection(){try{console.log("üîç Testing API connection...");const e=Date.now(),t=await this.healthCheck(),s=Date.now()-e;return t.success?(console.log(`‚úÖ API connection successful in ${s}ms`),{success:!0,data:{message:`API connected successfully in ${s}ms`,timestamp:Date.now()}}):(console.log("‚ùå API health check failed:",t.error),{success:!1,error:t.error||"Health check failed"})}catch(e){return console.error("üí• API connection test failed:",e),{success:!1,error:`Connection test failed: ${e instanceof Error?e.message:"Unknown error"}`}}}}},441:(e,t,s)=>{s.r(t),s.d(t,{AuthService:()=>r});class r{static async isAuthenticated(){return new Promise(e=>{chrome.storage.local.get([this.STORAGE_KEYS.USER,this.STORAGE_KEYS.AUTH_TOKEN],t=>{const s=t.user&&t.user.id&&t.user.email,r=Boolean(t.authToken);e(Boolean(s&&r))})})}static async getCurrentUser(){return new Promise(e=>{chrome.storage.local.get([this.STORAGE_KEYS.USER],t=>{e(t.user||null)})})}static async setUser(e,t){return new Promise(s=>{const r={user:e,authToken:t};chrome.storage.local.set(r,()=>{chrome.storage.local.set({[this.STORAGE_KEYS.LAST_LOGIN]:Date.now()},()=>{s()})})})}static async logout(){return new Promise(e=>{chrome.storage.local.remove([this.STORAGE_KEYS.USER,this.STORAGE_KEYS.AUTH_TOKEN,this.STORAGE_KEYS.LAST_LOGIN],()=>{e()})})}static async getAuthToken(){return new Promise(e=>{chrome.storage.local.get([this.STORAGE_KEYS.AUTH_TOKEN],t=>{e(t.authToken||null)})})}static redirectToLogin(){chrome.tabs.create({url:"https://your-website.com/login"})}static async checkAuthenticationStatus(){const e=await this.isAuthenticated();return{isAuthenticated:e,user:e?await this.getCurrentUser():null}}static async refreshAuthToken(){try{return!!await this.getCurrentUser()&&!!await this.getAuthToken()}catch(e){return console.error("Error refreshing auth token:",e),!1}}}r.STORAGE_KEYS={USER:"user",AUTH_TOKEN:"authToken",LAST_LOGIN:"lastLogin"}}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},console.log("üöÄ Background script loaded and starting..."),console.log("üöÄ Chrome runtime available:",!!chrome.runtime),console.log("üöÄ Chrome storage available:",!!chrome.storage);let r=null,a=null;try{console.log("üîÑ Loading AuthService...");const e=s(441);r=e.AuthService,console.log("‚úÖ AuthService loaded successfully")}catch(e){console.error("‚ùå Failed to load AuthService:",e)}try{console.log("üîÑ Loading ApiService...");const e=s(79);a=e.ApiService,console.log("‚úÖ ApiService loaded successfully")}catch(e){console.error("‚ùå Failed to load ApiService:",e)}console.log("üöÄ Background script ready to receive messages"),chrome.runtime.onInstalled.addListener(e=>{console.log("Extension installed:",e.reason),"install"===e.reason&&chrome.storage.local.set({firstInstall:!0,installDate:Date.now()})}),chrome.runtime.onStartup.addListener(()=>{console.log("Extension started"),async function(){try{if(!r)return void console.warn("AuthService not available for startup check");if(await r.isAuthenticated()){const e=await r.getCurrentUser();console.log("User is authenticated:",e?.email)}else console.log("User not authenticated")}catch(e){console.error("Error checking authentication:",e)}}()}),chrome.runtime.onMessage.addListener((e,t,s)=>{if(console.log("üî• Background received message:",e),!e)return console.error("‚ùå No request object received"),s({success:!1,error:"No request object"}),!0;if(!e.type)return console.error("‚ùå Invalid message format (no type):",e),s({success:!1,error:"Invalid message format - missing type"}),!0;try{switch(console.log(`üéØ Processing message type: ${e.type}`),e.type){case"CHECK_AUTH":console.log("Handling CHECK_AUTH"),async function(e){try{if(!r)return void e({success:!1,error:"AuthService not available"});const t=await r.isAuthenticated();e({success:!0,data:{isAuthenticated:t,user:t?await r.getCurrentUser():null}})}catch(t){console.error("Error in handleCheckAuth:",t),e({success:!1,error:"Failed to check authentication"})}}(s);break;case"LOGOUT":console.log("Handling LOGOUT"),async function(e){try{if(!r)return void e({success:!1,error:"AuthService not available"});await r.logout(),e({success:!0})}catch(t){console.error("Error in handleLogout:",t),e({success:!1,error:"Failed to logout"})}}(s);break;case"GET_USER_DATA":console.log("Handling GET_USER_DATA"),async function(e){try{if(!r||!a)return void e({success:!1,error:"Required services not available"});const t=await r.getCurrentUser();if(t)try{const s=await a.getDashboard(t.id);e({success:!0,data:{user:t,adStats:s&&s.success&&s.data?{totalAdsViewed:s.data.summary.totalClicks||0,totalRevenue:s.data.summary.totalSpent?.toString()||"0",revenueThisMonth:"0",revenueToday:"0"}:null}})}catch(s){console.error("Error getting dashboard data:",s),e({success:!0,data:{user:t,adStats:null}})}else e({success:!1,error:"No user found"})}catch(t){console.error("Error in handleGetUserData:",t),e({success:!1,error:"Failed to get user data"})}}(s);break;case"SUBMIT_WITHDRAWAL":console.log("Handling SUBMIT_WITHDRAWAL"),async function(e,t){try{if(!r||!a)return void t({success:!1,error:"Required services not available"});if(console.log("Processing withdrawal request via backend API:",e),!(e.userId&&e.amount&&e.method&&e.destination))throw new Error("Missing required withdrawal data");const s=await r.getCurrentUser();if(!s||!s.email)throw new Error("User not authenticated or email missing");if(!e.destination||e.destination.length<10)throw new Error("Invalid destination address format");const o=parseFloat(e.amount);if(isNaN(o)||o<=0)throw new Error("Invalid withdrawal amount");console.log("Creating transfer via backend API...");const n=await a.createTransfer(s.email,e.destination,e.amount);if(console.log("Transfer API result:",n),!(n&&n.success&&n.data)){const e=n&&n.error||n&&n.message||"Transaction failed";throw e.includes("JWT")||e.includes("secretOrPrivateKey")?new Error("Backend authentication configuration error. Please contact support."):e.includes("insufficient")||e.includes("balance")?new Error("Insufficient balance for this transaction."):e.includes("network")||e.includes("connection")?new Error("Network error. Please try again later."):new Error(e)}t({success:!0,data:{transactionHash:n.data.transactionResult?.hash||n.data.hash||n.data.transactionId||"pending",message:n.data.message||"Withdrawal completed successfully",status:n.data.status||"confirmed",transactionResult:n.data.transactionResult||n.data}})}catch(e){console.error("Error in handleSubmitWithdrawal:",e),t({success:!1,error:e instanceof Error?e.message:"Failed to process withdrawal"})}}(e.data,s);break;case"GET_WALLET_BALANCE":console.log("Handling GET_WALLET_BALANCE"),async function(e){try{if(!r||!a)return void e({success:!1,error:"Required services not available"});const t=await r.getCurrentUser();if(!t)return void e({success:!1,error:"User not authenticated"});console.log("Getting wallet balance for user:",t.email);const s=await a.getUserWalletByEmail(t.email);if(s&&s.success&&s.data){const t=s.data.balances.find(e=>"native"===e.type),r=s.data.balances.filter(e=>"native"!==e.type);e({success:!0,data:{balance:{native:t?.balance||"0",assets:r.map(e=>({assetCode:e.type,assetIssuer:"",balance:e.balance}))}}})}else e({success:!1,error:"Failed to fetch wallet balance"})}catch(t){console.error("Error in handleGetWalletBalance:",t),e({success:!1,error:"Failed to get wallet balance"})}}(s);break;case"SEND_PAYMENT":console.log("Handling SEND_PAYMENT"),async function(e,t){try{if(!r||!a)return void t({success:!1,error:"Required services not available"});if(console.log("Processing payment request:",e),!e.destination||!e.amount)throw new Error("Missing required payment data (destination and amount)");const s=await r.getCurrentUser();if(!s||!s.email)throw new Error("User not authenticated or email missing");if(e.destination.length<10)throw new Error("Invalid destination address format");const o=parseFloat(e.amount);if(isNaN(o)||o<=0)throw new Error("Invalid payment amount");console.log("Creating payment via backend API...");const n=await a.createTransfer(s.email,e.destination,e.amount);if(console.log("Payment API result:",n),!(n&&n.success&&n.data)){const e=n&&n.error||n&&n.message||"Payment failed";throw e.includes("JWT")||e.includes("secretOrPrivateKey")?new Error("Backend authentication configuration error. Please contact support."):e.includes("insufficient")||e.includes("balance")?new Error("Insufficient balance for this payment."):new Error(e)}t({success:!0,data:{transactionHash:n.data.transactionResult?.hash||n.data.hash||n.data.transactionId||"pending",message:n.data.message||"Payment sent successfully",status:n.data.status||"confirmed",transactionResult:n.data.transactionResult||n.data}})}catch(e){console.error("Error in handleSendPayment:",e),t({success:!1,error:e instanceof Error?e.message:"Failed to send payment"})}}(e.data,s);break;default:console.error("‚ùå Unknown message type:",e.type),s({success:!1,error:`Unknown message type: ${e.type}`})}}catch(e){console.error("üí• Error handling message:",e),s({success:!1,error:"Message handler error"})}return!0}),console.log("üöÄ Background script setup complete")})();